package com.hospital.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hospital.mapper.IMapper;


public class DBManager {
	
	private Connection getConn() throws Exception{
		Connection conn=DBHelper.ds.getConnection();
		return conn;
	}
	public int executeUpdate(String sql,Object []params) throws Exception{
		Connection conn=null;
		PreparedStatement stm=null;
		try {
			conn=this.getConn();
			stm=conn.prepareStatement(sql);
			if (params!=null) {
				for (int i = 0; i < params.length; i++) {
					stm.setObject(i+1, params[i]);
				}
			}
			int result=stm.executeUpdate();
			return result;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}finally{
			try{
				stm.close();
				conn.close();
			}catch(Exception ex){	
			}
		}	
	}
	public List<Object[]> executeQuery(String sql,Object []params) throws Exception{
		
		Connection conn=null;
		PreparedStatement stm=null;
		ResultSet rs=null;
		try {
			conn=this.getConn();
			stm=conn.prepareStatement(sql);
			if (params!=null) {
				for (int i = 0; i < params.length; i++) {
					stm.setObject(i+1, params[i]);
				}
			}
			rs=stm.executeQuery();
			int columns=rs.getMetaData().getColumnCount();
			List<Object[]> list=new ArrayList<Object[]>();
			while (rs.next()) {
				Object []arr=new Object[columns];
				for (int i = 0; i < columns; i++) {
					arr[i]=rs.getObject(i+1);
				}
				list.add(arr);
			}
			return list;
		} catch(Exception e) {
			e.printStackTrace();
			throw e;
		}finally{
			try {
				rs.close();
				stm.close();
				conn.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	public List executeQueryObjectList(String sql,Object []params,IMapper mapper) throws Exception{
		Connection conn=null;
		PreparedStatement stm=null;
		ResultSet rs=null;
		try {
			conn=this.getConn();
			stm=conn.prepareStatement(sql);
			if (params!=null) {
				for (int i = 0; i < params.length; i++) {
					stm.setObject(i+1, params[i]);
				}
			}
			rs=stm.executeQuery();
			List list=mapper.mapper(rs);
			return list;
		} catch(Exception e) {
			e.printStackTrace();
			throw e;
		}finally{
			try {
				rs.close();
				stm.close();
				conn.close();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
	}
	public int executeQueryJvHe(String sql,Object []params)
			throws Exception{
			Connection conn=null;
			PreparedStatement stm=null;
			ResultSet rs=null;
			
			try {
				conn=this.getConn();
				stm=conn.prepareStatement(sql);
				if (params!=null) {
					for (int i = 0; i < params.length; i++) {
						stm.setObject(i+1, params[i]);
					}
				}
				rs=stm.executeQuery();
				rs.next();
				return rs.getInt(1);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw e;
			}
		}
	
	//自己使用 @岳晨
	public int executeQueryYC(String sql,Object []params)
		throws Exception{
		Connection conn=null;
		PreparedStatement stm=null;
		ResultSet rs=null;
		int num = 0;
		try {
			conn=this.getConn();
			stm=conn.prepareStatement(sql);
			if (params!=null) {
				for (int i = 0; i < params.length; i++) {
					stm.setObject(i+1, params[i]);
				}
			}
			num = rs.getInt(1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw e;
		}finally{
			try {
				rs.close();
				stm.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return num;
	}
}
