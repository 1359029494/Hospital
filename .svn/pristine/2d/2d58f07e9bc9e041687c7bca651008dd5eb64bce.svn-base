package com.hospital.dao;

import java.util.List;

import com.hospital.db.DBManager;
import com.hospital.mapper.DoctorMapper;
import com.hospital.mapper.IMapper;
import com.hospital.vo.Doctor;

//医生表的DAO
public class DoctorDAO {
	//新增医生 
	public int save(Doctor d) throws Exception{
		String sql = "insert into Doctor values(docid.nextval,?,?,?,?,?,?,?,?,?,?)";
		Object []params = {
				d.getDocname(),
				d.getDocsex(),
				d.getDocage(),
				d.getDocidcard(),
				d.getDocphonenumber(),
				d.getDocmail(),
				d.getDocaddress(),
				d.getDocdept(),
				d.getDocphoto(),
				d.getDocpass()
		};
		DBManager db = new DBManager();
		int retn = db.executeUpdate(sql, params);
		return retn;
	}
	//删除医生  通过医生的ID,删除医生
	public int delete(Doctor d) throws Exception{
		String sql = "delete from Doctor where docid = ?";
		Object []params={
				d.getDocid()
		};
		DBManager db=new DBManager();
		int retn=db.executeUpdate(sql, params);
		return retn;
	}
	//删除医生 通过医生的id
	public int deleteid(int docid) throws Exception{
		String sql = "delete from Doctor where docid = ?";
		Object []params={
				docid
		};
		DBManager db=new DBManager();
		int retn=db.executeUpdate(sql, params);
		return retn;
	}
	//分页查询之前 需要知道总条数
	public int getTotal() throws Exception{
		String sql=" select count(*) from Doctor ";
		Object []params=null;
		DBManager db=new DBManager();
		int total=db.executeQueryJvHe(sql, params);
		return total;
	}
	//查询医生表 分页查询 查询出全部信息 
	public List<Doctor> findByPage(int pagenow, int pagesize) throws Exception{
		int start=(pagenow-1)*pagesize;
		String sql = " select *from (select rownum rn,d.* from Doctor d) where rn>? and rownum<=? ";
		Object []params = {
			start,
			pagesize
		};
		IMapper mapper = new DoctorMapper();
		DBManager db = new DBManager();
		List<Doctor> list = db.executeQueryObjectList(sql, params, mapper);
		return list;
	}
	//修改医生信息 通过医生ID,获取医生信息 并修改
	public int merge(Doctor d) throws Exception{
		String sql=" update doctor set docname=?,docpass=?,docidcard=?,docphoto=?,docsex=?,docage=?,docphonenumber=?,docmail=?,docaddress=?,docdept=? where docid=? ";
		Object []params={
				d.getDocname(),
				d.getDocpass(),
				d.getDocidcard(),
				d.getDocphoto(),
				d.getDocsex(),
				d.getDocage(),
				d.getDocphonenumber(),
				d.getDocmail(),
				d.getDocaddress(),
				d.getDocdept(),
				d.getDocid()
		};
		DBManager db=new DBManager();
		int retn=db.executeUpdate(sql, params);
		return retn;
	}
	//通过医生姓名 直接查询该医生的所有信息  岳晨改！
	public Doctor findByName(String docname) throws Exception{
		String sql="select *from doctor where docname=?";
		Object []params={
				docname
		};
		IMapper mapper=new DoctorMapper();
		DBManager db=new DBManager();
		List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
		System.out.println(list.size());
		Doctor d=list.get(0);
		return d;
	}
	public Doctor findById(int docid) throws Exception{
		String sql="select *from doctor where docid=?";
		Object []params={
				docid
		};
		IMapper mapper=new DoctorMapper();
		DBManager db=new DBManager();
		List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
		System.out.println(list.size());
		Doctor d=list.get(0);
		return d;
	}
	/*
	 *黄成兴-12/9-19:26
	 */
	//通过医生手机号和密码查询医生信息
	public Doctor login(String docphonenumber,String docpass) throws Exception{
		String sql="select *from doctor where docphonenumber=? and docpass=?";
		Object []params={
				docphonenumber,docpass
		};
		IMapper mapper=new DoctorMapper();
		DBManager db=new DBManager();
		List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
		Doctor d=list.get(0);
		return d;
	}
	//查询特定科室下的医生数量
	public int getTotalToKeShi(String docdept) throws Exception{
		String sql=" select count(*) from Doctor where docdept=? ";
		Object []params= {
				docdept
		};
		DBManager db=new DBManager();
		int total=db.executeQueryJvHe(sql, params);
		return total;
	}
	/*
	 *黄成兴-12/10-21:38
	 */
	//查询通过医生手机号查询信息
	public Doctor findByphone(String docphonenumber) throws Exception{
		String sql="select *from doctor where docphonenumber=?";
		Object []params={
				docphonenumber
		};
		IMapper mapper=new DoctorMapper();
		DBManager db=new DBManager();
		List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
		Doctor d=list.get(0);
		return d;
	}
	//分页查询 通过科室
	public List<Doctor> findByPageToKeShi(String docdept,int pagenow, int pagesize) throws Exception{
		int start=(pagenow-1)*pagesize;
		String sql = " select *from (select rownum rn,d.* from doctor d where docdept=?) where rn>? and rownum<=? ";
		Object []params = {
			docdept,
			start,
			pagesize
		};
		IMapper mapper = new DoctorMapper();
		DBManager db = new DBManager();
		List<Doctor> list = db.executeQueryObjectList(sql, params, mapper);
		return list;
	}
	/*
	 *黄成兴-12/14-21:38
	 */
	//查询通过医生手机号查询信息
	public int mergedocpass(Doctor d) throws Exception{
		String sql=" update doctor set docpass=? where docid=? ";
		Object []params={
				d.getDocpass(),
				d.getDocid()
		};
		DBManager db=new DBManager();
		int retn=db.executeUpdate(sql, params);
		return retn;
	}
	
	//通过医生手机号 直接查询该医生的所有信息  岳晨改！
		public boolean findByPhone(String docphonenumber) throws Exception{
			boolean flag = false;
			String sql="select *from doctor where docphonenumber=?";
			Object []params={
					docphonenumber
			};
			IMapper mapper=new DoctorMapper();
			DBManager db=new DBManager();
			List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
			if(!list.isEmpty()) {
				flag = true;
			}
			return flag;
		}
		
		//通过医生科室 直接查询该医生的所有信息  岳晨改！
				public List<Doctor> findByDept(String docdept) throws Exception{
					boolean flag = false;
					String sql="select *from doctor where docdept=?";
					Object []params={
							docdept
					};
					IMapper mapper=new DoctorMapper();
					DBManager db=new DBManager();
					List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
					return list;
				}
				
				//查询医生手机号是否重复
				public boolean findByPhoneRe(String docphonenumber, String olddocphonenumber) throws Exception{
					boolean flag = false;
					String sql="select *from doctor where docphonenumber=? and docphonenumber not in (?)";
					Object []params={
							docphonenumber,olddocphonenumber
					};
					IMapper mapper=new DoctorMapper();
					DBManager db=new DBManager();
					List<Doctor> list=db.executeQueryObjectList(sql, params, mapper);
					if(!list.isEmpty()) {
						flag = true;
					}
					return flag;
				}
}
